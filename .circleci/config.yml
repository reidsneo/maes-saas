# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:8.0.20-ram
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_USER: forge
          MYSQL_DATABASE: forge
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_PASSWORD: 'forge'

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd
      - run: sudo docker-php-ext-install zip bcmath pdo_mysql
      - run: sudo apt-get install default-mysql-client

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      
      - run:
          name: "Generate App key"
          command: php artisan key:generate
    
      # prepare the database
      - run: touch storage/testing.sqlite
      - run: php artisan config:clear
      - run: mysqladmin create laravel --host="127.0.0.1" --user="root" --password=""
      - run: php artisan migrate --env=local --database=mysql --force

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
      
      
  deploy:
    machine:
      enabled: true
    branches:
      only:
        - main
    working_directory: ~/laravel
    steps:
      - checkout
      - run:
          name: run deployment script
          command: ./bin/deployment-script.sh
      - add_ssh_keys:
          fingerprints:
            - "c2:f2:cc:a6:0d:5e:03:8a:81:3f:0c:44:36:cd:82:bf"
      - run:
          name: fix host authenticity for production server
          command: ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - run:
          name: deploy app
          command: scp laravel $SSH_USERNAME@$SSH_HOST:/var/www/html/
          
  workflows:
    version: 2
    build-and-deploy:
      jobs:
        - build
        - deploy:
            requires:
              - build
            filters:
              branches:
                only: main
